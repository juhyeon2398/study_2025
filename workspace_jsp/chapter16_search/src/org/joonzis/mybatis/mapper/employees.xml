<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="org.joonzis.mybatis.mapper.employees"> <!-- 경로 표기법이 클래스명 표기법처럼 사용된다! -->
	<!-- 
		mapper에서는 ?(물음표)를 사용할 수 없다.
		대신 전달한 파라미터의 이름은 #{}을 통해 적는다.
		sql문 뒤에 ;(세미콜론)이 없다.
	 -->
	
	<!-- 
		각 태그 속성
		1. id : id를 통해서 sql문을 선택 (임의로 결정 가능)
		2. parameterType : 매개변수의 타입
		3. resultType : 리턴 데이터의 타입 (풀 패키지로 작성)
			- insert, update, delete의 경우 무조건 int 형식이기 때문에 작성할 필요가 없다
	 -->
	 
	 <select id="select_all" resultType="org.joonzis.vo.EmployeeVO">
	 	select * from employees order by employee_id
	 </select>

	 <select id="select_filter" resultType="org.joonzis.vo.EmployeeVO">
	 	select * from employees 
 		<choose>
			<when test="searchFilter==1">where employee_id = #{searchText}</when>
			<when test="searchFilter==2">where department_id = #{searchText} order by employee_id </when>
			<when test="searchFilter==3">where last_name = #{searchText} order by employee_id </when>
			<otherwise>where employee_id = TO_NUMBER(#{searchText}) or department_id = TO_NUMBER(#{searchText}) or last_name = #{searchText} order by employee_id</otherwise>
		</choose>
	 </select>
	 
	 <select id="select_department_id_list" resultType="org.joonzis.vo.EmployeeVO">
	 	select DISTINCT department_id from employees where department_id is not null
	 </select>

	 <select id="select_department_id" resultType="org.joonzis.vo.EmployeeVO">
	 	select * from employees where department_id = #{department_id} order by employee_id
	 </select>
	 
	
	 
</mapper>






