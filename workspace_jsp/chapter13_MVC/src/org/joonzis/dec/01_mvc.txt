1. 모델 1 구조
	1) JSP 파일 하나로 처리 가능
	2) 간단한 로직, 프로젝트에 적합
	3) Java코드와 JSP코드가 섞여있어 가독성이 떨어짐
	
   ┌───────┐   요청/응답
   │Browser│ <────────> JSP <────────> Service, JavaBean
   └───────┘			 
						 
						 
2. 모델 2 구조
	1) 웹 브라우저의 요청을 하나의 서블릿이 받는다(단일 진입점)
						 
			       요청
   ┌───────┐ ──────────> Servlet <────> Logic Class 	
   │Browser│	응답		   ↓ 
   └───────┘<──────────	  JSP <────────> Service, JavaBean		 
						 

3. 모델 1 대비 모델 2의 장/단점
	1) 장점
		(1) 출력을 위한 뷰 코드와 로직 처리를 위한 자바 코드를 분리였기 때문에
			모델 1 방식에 비해 코드가 복잡하지 않다.
		(2) 뷰, 로직처리 분업 용이
		(3) 기능이 분리됨에 따라 유지보수가 용이
	2) 단점
		(1) 구조가 복잡하여 습득이 어렵고 작업량이 많다.
		(2) java에 대한 이해도가 필요


4. MVC 패턴
	1) M : model, 비지니스 로직 / DB 처리, JAVA 파일 (POJO : 순수 자바)
	2) V : view, 화면처리, JSP 파일
	3) C : controller, 흐름 제어, Servlet 파일 
	4) 기본 흐름
		화면(JSP) => 요청(검색,로그인 등) => 컨트롤러 (Servlet) => 요청에 맞는 Model 호출 
	5) 이동 경로
		jsp -> Controller -> action(Model) -> dao -> mapper -> dto -> Controller -> jsp
		
		
				요청				           로직 처리
   ┌───────┐ ──────────> Controller <────────> Model 
   │Browser│	응답		   ↓
   └───────┘<──────────	  View 
   


   